Q.1- Name and handle the exception occured in the following program: 
a=3
 if a<4:
    a=a/(a-3)
     print(a)
=> ZeroDivisionError
--------------------------------------------------------------------------------------------------------------------------
Q.2- Name and handle the exception occurred in the following program: 
l=[1,2,3]
print(l[3])
=>Indexed Error
--------------------------------------------------------------------------------------------------------------------------
Q.3- What will be the output of the following code:

# Program to depict Raising Exception
 
try:
    raise NameError("Hi there")  # Raise Error
except NameError:
    print "An exception"
    raise  # To determine whether the exception was raised or not
=>An exception
Traceback (most recent call last):
  File "c:\Users\SAHIL\Desktop\python\Area.py", line 4, in <module>
    raise NameError("Hi there")  # Raise Error
NameError: Hi there
--------------------------------------------------------------------------------------------------------------------------
Q.4- What will be the output of the following code:

 # Function which returns a/b
def AbyB(a , b):
	try:
		c = ((a+b) / (a-b))
	except ZeroDivisionError:
		print "a/b result in 0"
	else:
		print c

# Driver program to test above function
AbyB(2.0, 3.0)
AbyB(3.0, 3.0)
==>-5.0
a/b result in 0
-------------------------------------------------------------------------------------------------------------------------
Q.5- Write a program to show and handle following exceptions: 
1. Import Error
2. Value Error
3. Index Error
#1. Import Error
try:
  from threading import ABC
  print(ABC)
except ImportError as e:
  print("Error occured:",e)

#2. Value Error
try:
  a=int(input("Enter number: "))
  print(a)
except ValueError as e:
  print("Error occured:",e)

#3. Index Error
l=[0,1,2]
try:
  print(l[3])
except IndexError as e:
  print("Error occured:",e)
-------------------------------------------------------------------------------------------------------------------------
Q.6- Create a user-defined exception AgeTooSmallError() that warns the user when they have entered age less than 18. The code must keep taking input till the user enters the appropriate age number(less than 18). 
class Error(Exception):
    def __init__(self):
        (self,Exception).__init__(self)
    def agetoosmall(self,msg):
        print(msg)
c=True
while c:
    try:
        age=int(input("Enter the age"))
        if age<18:
            raise Error
    except Error as e:
        e.agetoosmall("age must be greater than 18")
    else: 
        c=False